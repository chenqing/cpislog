#!/usr/bin/perl
use strict ;
use Getopt::Long ;
use Time::Local;
use Term::ANSIColor;
use POSIX qw(strftime);
use Encode;
my ($total,$app, $time_interval, $start_time ,$end_time ,$range_time,$url,$http_code,$ip,$net);
system('LANG=zh_CN.GB18030');
my $version = 1.1 ;
if ( $#ARGV == -1 ){
    Help();
}
 GetOptions(
    'help|h|?' => sub { Help();} ,
    'version|v' => sub { Version();} ,
    'role|r=s'   => \$app,
    'start_time|st=s'  => \$start_time,
    'end_time|et=s'  => \$end_time,
    'range_time|rt=s'     => \$range_time,
    'url|u=s'     => \$url ,
    'ip=s'     => \$ip ,
    'net=s'     => \$net ,
    'http_code|hc=s'     => \$http_code ,
    'time_interval|i=i'     => \$time_interval ,
);

if (! $app ){
    $app = 'cpisfc';
}
sub color_message{
         my($colors,$messages) = @_;
        print color "bold  $colors";
        print "$messages \n";
        print color 'reset';
}
sub Version{
    print "$version \n";
    exit ;
}
sub Help{
color_message "red" , "Useage:";
        color_message "green" ,  "cpislog --role [fc|fscs] --range_time|--start_time,--end_time [-i|--url|--ip]";
        color_message "red" ,"options:";
        color_message "green", "
    -i,--interval  n  (unit is min)       count the bandwidth's interval
    -u,--url       url  like sina.com.cn  count the bandwidth of this domain
    --ip           221.130.162.1   count the bandwidth of this ip";
        color_message "red", "examples:";
        color_message "green" ,"
    cpislog --role [fc|fscs]  --start_time [20121212121200] --end_time [20121212121300]  -i [5|7|10...]
    cpislog --role [fc|fscs]  --start_time [20121212121200] --end_time [20121212121300]  -i [5|7|10...] -u www.baidu.com
    cpislog   -rt 10m   //will output to screen from now 10 min
    if no  interval ,will print out all the log to screen ";
        color_message "red", "others:";
        color_message "green" ,"    cpislog assort with  gb command ,more informations type gb --help";
    exit;

}
my ($time_sys_start,$time_sys_end);
if (  $start_time and not $end_time ){
open FH,  "perl ../bin/cpislog_api --role $app --start_time $start_time | " ;
}elsif( $start_time and  $end_time ){
open FH,  "perl ../bin/cpislog_api --role $app --start_time $start_time --end_time $end_time | " ;
        $time_sys_start = timelocal((substr($start_time,-2,2)),(substr($start_time,-4,2)),
                    (substr($start_time,-6,2)),(substr($start_time,-8,2)),(substr($start_time,-10,2) - '01'),
                            (substr($start_time,0,4)));

        $time_sys_end = timelocal((substr($end_time,-2,2)),(substr($end_time,-4,2)),
                    (substr($end_time,-6,2)),(substr($end_time,-8,2)),(substr($end_time,-10,2) - '01'),
                            (substr($end_time,0,4)));
}elsif( $range_time ){
open FH,  "perl ../bin/cpislog_api --role $app --rt $range_time | " ;
}else{
exit 1;
}
my @band_width;
my %time;
if(defined $time_interval){
my @file = <FH> ;
my $i;
for ( $i = 0 ; $i < ( ($time_sys_end - $time_sys_start)/($time_interval *60 )) ; $i++ ){
my $tmp = 0 ;
foreach (@file){
    my @fileds = split /\s+/ ,$_ ;
    my $time_head = substr($_,0,14);
    my $start_total = ($time_sys_start +  $i * $time_interval * 60 );
    my $end_total = ( $time_sys_start + ($time_interval *60) * ($i + 1) );
    if(($time_head >= $start_total) and ($time_head < $end_total ) ){
    #$time_head = strftime("%Y%m%d%H%M%S",localtime($time_head) ) ;
    if ($url and not defined $ip and not defined $http_code){
         if ($fileds[6] =~ /http:\/\/$url.*?/){
    $band_width[$i] +=  $fileds[4] ;
        }
    }
    if ( $url and $ip and not $http_code){
	if (($fileds[6] =~ /http:\/\/$url.*?/) and ($fileds[2] eq $ip )){
	$band_width[$i] +=  $fileds[4] ;
	}
	}
    if ( $url and $ip and  $http_code){
	if (($fileds[6] =~ /http:\/\/$url.*?/) and ($fileds[2] eq $ip ) and ($fileds[3] =~ /$http_code/) ){
	$band_width[$i] +=  $fileds[4] ;
	}
	}
    if ( $ip and not defined $url and not defined $http_code){
	if (($fileds[6] =~ /http:\/\/$url.*?/) and ($fileds[2] eq $ip )){
	$band_width[$i] +=  $fileds[4] ;
	}
	}
    if ( defined $http_code and not defined $url and not defined $ip){
	if (($fileds[3] =~ /$http_code/) ){
	$band_width[$i] +=  $fileds[4] ;
	}
	}
    if ( defined $http_code and defined  $url and not defined $ip){
	if (($fileds[3] =~ /$http_code/) and ($fileds[6] =~ /http:\/\/$url.*?/) ){
	$band_width[$i] +=  $fileds[4] ;
	}
	}
    if ( not defined $url and not defined $ip and not defined $http_code) {

    #}
    #if ($url and  $http_code){
    #   if (($fileds[6] =~ /http:\/\/$url.*?/) and ($fileds[3] =~ /$http_code/)){
    #$band_width[$i] +=  $fileds[4]  ;
    #   }
    #}
    #if ( not $url and not $http_code ){
    $band_width[$i] +=  $fileds[4]  ;
    #}

    }
    $time{$i} = $start_total ;
}
}
}
}else{
	while(<FH>){
	print ;
	}

}
close FH ;
my $count = 0;
my $unit ;
my $total_tmp ;

foreach ( @band_width){
    if ($_ >1024 and $_ <(1024 * 1024)){
        $unit = 'KB' ;
        $total_tmp = $_ / 1024 ;
    }elsif ($_ >(1024 * 1024 ) and $_ <(1024 * 1024 * 1024)){
        $unit = 'MB' ;
        $total_tmp = $_ / (1024 *1024) ;
    }elsif ($_ >(1024 * 1024 *1024 ) and $_ <(1024 * 1024 * 1024 *1024)){
        $unit = 'GB';
        $total_tmp = $_ / (1024 *1024*1024) ;
    }else{
    $unit  = 'bytes';
    }
    my ($sec_1,$min_1,$hour_1,$mday_1,$mon_1,$year_1,$wday_1,$yday_1,$isdst_1)=localtime($time_interval * 60 * $count +$time_sys_start);
    my ($sec_2,$min_2,$hour_2,$mday_2,$mon_2,$year_2,$wday_2,$yday_2,$isdst_2)=localtime($time_interval * 60 * ($count +1 ) +$time_sys_start - 1) ;
    $mon_1 = $mon_1 + 1;
    $mon_2 = $mon_2 + 1;
    my $time_1 = "$mon_1月$mday_1日$hour_1:$min_1:$sec_1";
    my $time_2 = "$mon_2月$mday_2日$hour_2:$min_2:$sec_2";
    printf "%s 到 %s 流量是: %.2f%s \n",$time_1,$time_2  ,$total_tmp ,$unit ;
    $count ++;
}
#printf "%d M\n", $total/(1024*1024) ;
